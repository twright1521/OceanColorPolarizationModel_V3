function [ outputFileName, F11, F21, F33, F34, RXP_scatAngles ] = ...
                MieToRXP( mieOutput, outputModelName, outputDir, varargin)
%MieToRXP Convert the Results of Meerhoff Mie Code into the format 
%         RXP can understand
%
% Optional Inputs:
%         (1) Description -    Cell Array of Strings describing this 
%                              Mueller Matrix.
%         (2) Phase Function - A Normalized Phase function which can be
%                              used in place of the one generated by the
%                              Mie code. (Normalized to 1)
%         (3) Scat. Angles for Phase Function - Angles which define the
%                              given phase function.
%
%  Output:
%         The Elements of the scattering Matrix.  (Note: will return NaN
%         for the Elements if the mie file does not have the direct phase
%         function in it (havent fixed the issue with wigner-d function
%         generation yet.)

%==========================================================================
%%%%%%%%%%%%%%%%%%%%%%% E X A M I N E  I N P U T S %%%%%%%%%%%%%%%%%%%%%%%%
%==========================================================================
PFProvided = false;

if(nargin == 4)
    Description = varargin{1};
else
    Description = {' '};
end

if(nargin == 5)
    error('Must provide scattering angle data for the Phase function provided!\n');
end

if(nargin == 6)
    Description   = varargin{1};
    PF_given      = varargin{2};
    PF_ang        = varargin{3};
    
    if(size(PF_given) ~= size(PF_ang))
        error('Phase function and angles must be vectors of the same size!\n');
    end
    PFProvided = true;
end

%Create the output directory if it doesn't exist.
if(exist(outputDir, 'dir') ~= 7) 
    mkdir(outputDir);  
end


%==========================================================================
%%%%%%%%%%%%% C O N V E R T  S C A T T E R I N G  M A T R I X %%%%%%%%%%%%%
%==========================================================================

%Parse the Mie Output
[F11, F21, F33, F34, ScattAng, ~, ~, ~, ~, ~, ~, ...
    Wavelen_nm, Rem, Imm, SSA, Qsca, Qext, ~, Vavg] ...
                                               = parseMieOutput(mieOutput);

%Convert wavelength to micron
Wavelen_um = Wavelen_nm./1000;

%Create the output filename
if(strcmpi(outputDir(end), filesep))
    outputFileName = ...
        sprintf('%s%s.%03.0f', outputDir, outputModelName, Wavelen_um*100);
else
    outputFileName = ...
        sprintf('%s%s%s.%03.0f', outputDir, filesep, outputModelName, ...
                Wavelen_um*100);
end

%Compute the reduced Mueller Matrix
A1_red = F11./F11;
B1_red = F21./F11;
A4_red = F33./F11;
B2_red = F34./F11;

%Compute A+ and A-
Aplus_red   = 0.5.*(A1_red + A4_red);
Aminus_red  = 0.5.*(A1_red - A4_red);

%Define RayXP Scattering Angles
RXP_scatAngles = [0;0.10;0.20;0.40;0.50;0.70;1;2;3;4;5;6;7;8;9;10;
    12;14;16;18;20;21;22;23;24;25;30;35;36;37;38;39;40;42.50;45;
    47.50;50;55;59;60;64;66;68;70;75;80;85;90;95;100;105;110;115;120;
    122.5;125;126.5;127.5;130;132.5;133.5;135;137.5;140;142.50;145;
    147.50;150;152.50;154;155;157.5;160;162;164;165;166;168;170;172;
    173;174;175;176;177;178;179;179.50;180];

%Interpolate the phase function if provided.
if(PFProvided)
    PF    = interp1(PF_ang, PF_given, RXP_scatAngles, 'linear', 'extrap');    
    PF    = (4*pi).*PF;  %RayXP requires phase function normalized to 4pi
else
    PF    = interp1(ScattAng, F11,    RXP_scatAngles, 'linear', 'extrap');
end

%Compute the Asymmetry Parameter (g)
%Note RXP required PF to be normalized to 4 pi, so the integrand is divided
%by 2 instead of multiplied by 2*pi, since the 4pi is already included.
gIntegrand = 0.5.*PF.*sind(RXP_scatAngles).*cosd(RXP_scatAngles);
AsymParam = integral_simpsons(RXP_scatAngles.*pi./180, gIntegrand);

%Interpolate Mie output to RayXP Scattering Angles
A1     = interp1(ScattAng, A1_red,     RXP_scatAngles, 'linear', 'extrap');
B1     = interp1(ScattAng, B1_red,     RXP_scatAngles, 'linear', 'extrap');
A4     = interp1(ScattAng, A4_red,     RXP_scatAngles, 'linear', 'extrap');
B2     = interp1(ScattAng, B2_red,     RXP_scatAngles, 'linear', 'extrap');
Aplus  = interp1(ScattAng, Aplus_red,  RXP_scatAngles, 'linear', 'extrap');
Aminus = interp1(ScattAng, Aminus_red, RXP_scatAngles, 'linear', 'extrap');

%Return to un-reduced Mueller Matrix
A1     = PF.*A1;
B1     = PF.*B1;
A4     = PF.*A4;
B2     = PF.*B2;
Aplus  = PF.*Aplus;
Aminus = PF.*Aminus;

%==========================================================================
%%%%%%%%%%%%%%%%%%% W R I T E  O U T P U T  F I L E %%%%%%%%%%%%%%%%%%%%%%%
%==========================================================================
%Open the output file
FID = fopen(outputFileName, 'wt');

%Print the header information
fprintf(FID,'%s\n',                 '//Ray::SolLib Version 2');
fprintf(FID,'%-20s: %s\n',          'Type',                 'Compound');
fprintf(FID,'%-20s: %s\n',          'SolName',              outputModelName);
fprintf(FID,'%-20s: %10.8f\n',      'RealRI',               Rem);
fprintf(FID,'%-20s: %10.8f\n',      'ImaginaryRI',          Imm);
fprintf(FID,'%-20s: %4.2f mkm\n',   'Wavelength',           Wavelen_um);
fprintf(FID,'%-20s: %4.2f %s\n',    'QExtinction',          Qext, '//Arbitrary units!!!');
fprintf(FID,'%-20s: %4.2f\n',       'QScattering',          Qsca);
fprintf(FID,'%-20s: %7.5f\n',       'SSA',                  SSA);
fprintf(FID,'%-20s: %7.5f\n',       'Asymmetry',            AsymParam);
fprintf(FID,'%-20s: %s\n',          'MeanRadius',           '-');
fprintf(FID,'%-20s: %s\n',          'MeanSquare',           '-');
fprintf(FID,'%-20s: %7.5f\n',       'MeanVolume',           Vavg);
fprintf(FID,'%-20s: %s\n',          'EffectiveRadius',      '-');
fprintf(FID,'%-20s: %s\n',          'SpecificScattering',   '-');
fprintf(FID,'%-20s\n',              'ARRAY=');
fprintf(FID,'// "ANGLE"             "A1"               "A+"               "A-"               "A4"               "B1"               "B2"\n');

%Print the scattering matrix
for ang = 1:length(RXP_scatAngles)
fprintf(FID,'% 16.9e, % 16.9e, % 16.9e, % 16.9e, % 16.9e, % 16.9e, % 16.9e\n', ...
            RXP_scatAngles(ang), A1(ang), Aplus(ang), Aminus(ang), ...
            A4(ang), B1(ang), B2(ang));
end

%Print ancillary information at the bottom
fprintf(FID, 'TEXT=\n');
fprintf(FID, '%s\n', Description{:});
fprintf(FID, 'END_TEXT\n');

%Close the output file
fclose(FID);

end

